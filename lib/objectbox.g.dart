// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/estado_model.dart';
import 'data/model/libreria_model.dart';
import 'data/model/libro_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7902030358703073066),
      name: 'EstadoModel',
      lastPropertyId: const IdUid(4, 6248849718502569820),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2760128357272489300),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8480054918145046216),
            name: 'edoName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1845900568252224603),
            name: 'capital',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6248849718502569820),
            name: 'poblacion',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 4607524802689920693),
            name: 'lsLibreria',
            targetId: const IdUid(2, 1852176079784171399))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1852176079784171399),
      name: 'LibreriaModel',
      lastPropertyId: const IdUid(6, 5980347005503306193),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3414518276157725121),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1301531933215251832),
            name: 'libName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3562970971263115665),
            name: 'direccion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4038442046642212394),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4913779077390006015),
            name: 'correo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5980347005503306193),
            name: 'estadoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5829204197197656492),
            relationTarget: 'EstadoModel')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 4735243646053464414),
            name: 'lsLibro',
            targetId: const IdUid(3, 2127972266999619810))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2127972266999619810),
      name: 'LibroModel',
      lastPropertyId: const IdUid(6, 770384257393831544),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6165170761527002683),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5085383246993243470),
            name: 'libroName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1324416517032619478),
            name: 'autor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3102871739131180162),
            name: 'editorial',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1543479914537198051),
            name: 'paginas',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 770384257393831544),
            name: 'libreriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 1314721661438329954),
            relationTarget: 'LibreriaModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 2127972266999619810),
      lastIndexId: const IdUid(2, 1314721661438329954),
      lastRelationId: const IdUid(2, 4735243646053464414),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    EstadoModel: EntityDefinition<EstadoModel>(
        model: _entities[0],
        toOneRelations: (EstadoModel object) => [],
        toManyRelations: (EstadoModel object) =>
            {RelInfo<EstadoModel>.toMany(1, object.id): object.lsLibreria},
        getId: (EstadoModel object) => object.id,
        setId: (EstadoModel object, int id) {
          object.id = id;
        },
        objectToFB: (EstadoModel object, fb.Builder fbb) {
          final edoNameOffset = fbb.writeString(object.edoName);
          final capitalOffset = fbb.writeString(object.capital);
          final poblacionOffset = fbb.writeString(object.poblacion);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, edoNameOffset);
          fbb.addOffset(2, capitalOffset);
          fbb.addOffset(3, poblacionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EstadoModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              edoName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              capital: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              poblacion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          InternalToManyAccess.setRelInfo(
              object.lsLibreria,
              store,
              RelInfo<EstadoModel>.toMany(1, object.id),
              store.box<EstadoModel>());
          return object;
        }),
    LibreriaModel: EntityDefinition<LibreriaModel>(
        model: _entities[1],
        toOneRelations: (LibreriaModel object) => [object.estado],
        toManyRelations: (LibreriaModel object) =>
            {RelInfo<LibreriaModel>.toMany(2, object.id): object.lsLibro},
        getId: (LibreriaModel object) => object.id,
        setId: (LibreriaModel object, int id) {
          object.id = id;
        },
        objectToFB: (LibreriaModel object, fb.Builder fbb) {
          final libNameOffset = fbb.writeString(object.libName);
          final direccionOffset = fbb.writeString(object.direccion);
          final telefonoOffset = fbb.writeString(object.telefono);
          final correoOffset = fbb.writeString(object.correo);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, libNameOffset);
          fbb.addOffset(2, direccionOffset);
          fbb.addOffset(3, telefonoOffset);
          fbb.addOffset(4, correoOffset);
          fbb.addInt64(5, object.estado.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LibreriaModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              libName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              direccion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              correo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''));
          object.estado.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.estado.attach(store);
          InternalToManyAccess.setRelInfo(
              object.lsLibro,
              store,
              RelInfo<LibreriaModel>.toMany(2, object.id),
              store.box<LibreriaModel>());
          return object;
        }),
    LibroModel: EntityDefinition<LibroModel>(
        model: _entities[2],
        toOneRelations: (LibroModel object) => [object.libreria],
        toManyRelations: (LibroModel object) => {},
        getId: (LibroModel object) => object.id,
        setId: (LibroModel object, int id) {
          object.id = id;
        },
        objectToFB: (LibroModel object, fb.Builder fbb) {
          final libroNameOffset = fbb.writeString(object.libroName);
          final autorOffset = fbb.writeString(object.autor);
          final editorialOffset = fbb.writeString(object.editorial);
          final paginasOffset = fbb.writeString(object.paginas);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, libroNameOffset);
          fbb.addOffset(2, autorOffset);
          fbb.addOffset(3, editorialOffset);
          fbb.addOffset(4, paginasOffset);
          fbb.addInt64(5, object.libreria.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LibroModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              libroName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              autor: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              editorial: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              paginas: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''));
          object.libreria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.libreria.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [EstadoModel] entity fields to define ObjectBox queries.
class EstadoModel_ {
  /// see [EstadoModel.id]
  static final id =
      QueryIntegerProperty<EstadoModel>(_entities[0].properties[0]);

  /// see [EstadoModel.edoName]
  static final edoName =
      QueryStringProperty<EstadoModel>(_entities[0].properties[1]);

  /// see [EstadoModel.capital]
  static final capital =
      QueryStringProperty<EstadoModel>(_entities[0].properties[2]);

  /// see [EstadoModel.poblacion]
  static final poblacion =
      QueryStringProperty<EstadoModel>(_entities[0].properties[3]);

  /// see [EstadoModel.lsLibreria]
  static final lsLibreria = QueryRelationToMany<EstadoModel, LibreriaModel>(
      _entities[0].relations[0]);
}

/// [LibreriaModel] entity fields to define ObjectBox queries.
class LibreriaModel_ {
  /// see [LibreriaModel.id]
  static final id =
      QueryIntegerProperty<LibreriaModel>(_entities[1].properties[0]);

  /// see [LibreriaModel.libName]
  static final libName =
      QueryStringProperty<LibreriaModel>(_entities[1].properties[1]);

  /// see [LibreriaModel.direccion]
  static final direccion =
      QueryStringProperty<LibreriaModel>(_entities[1].properties[2]);

  /// see [LibreriaModel.telefono]
  static final telefono =
      QueryStringProperty<LibreriaModel>(_entities[1].properties[3]);

  /// see [LibreriaModel.correo]
  static final correo =
      QueryStringProperty<LibreriaModel>(_entities[1].properties[4]);

  /// see [LibreriaModel.estado]
  static final estado = QueryRelationToOne<LibreriaModel, EstadoModel>(
      _entities[1].properties[5]);

  /// see [LibreriaModel.lsLibro]
  static final lsLibro =
      QueryRelationToMany<LibreriaModel, LibroModel>(_entities[1].relations[0]);
}

/// [LibroModel] entity fields to define ObjectBox queries.
class LibroModel_ {
  /// see [LibroModel.id]
  static final id =
      QueryIntegerProperty<LibroModel>(_entities[2].properties[0]);

  /// see [LibroModel.libroName]
  static final libroName =
      QueryStringProperty<LibroModel>(_entities[2].properties[1]);

  /// see [LibroModel.autor]
  static final autor =
      QueryStringProperty<LibroModel>(_entities[2].properties[2]);

  /// see [LibroModel.editorial]
  static final editorial =
      QueryStringProperty<LibroModel>(_entities[2].properties[3]);

  /// see [LibroModel.paginas]
  static final paginas =
      QueryStringProperty<LibroModel>(_entities[2].properties[4]);

  /// see [LibroModel.libreria]
  static final libreria =
      QueryRelationToOne<LibroModel, LibreriaModel>(_entities[2].properties[5]);
}
